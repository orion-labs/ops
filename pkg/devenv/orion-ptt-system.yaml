---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Cloudformation script to create the orion-ptt-system in AWS'

Resources:
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: {{.InstanceType}}
      ImageId: {{.AmiID}}
      #      ImageId: !If [ AutodetectAmiId, !Ref InstanceAmi, !Ref InstanceAmiId ]
      KeyName: {{.KeyName}}

      IamInstanceProfile: !Ref KubernetesNodeInstanceProfile
      UserData:
        Fn::Base64:
          !Sub |
          #!/bin/bash
          curl https://kurl.sh/orion-ptt-system | sudo bash

      BlockDeviceMappings:
        - DeviceName: "/dev/sda1"
          Ebs:
            VolumeSize: {{.VolumeSize}}
            VolumeType: gp2

      NetworkInterfaces:
        - AssociatePublicIpAddress: "True"
          DeleteOnTermination: "True"
          SubnetId: {{.SubnetID}}
          DeviceIndex: 0
          GroupSet:
            - Ref: InstanceSecurityGroup

      Tags:
        - Key: OrionRole
          Value: Kubernetes Node

        - Key: Name
          Value: !Sub ${AWS::StackName}-${InstanceName}

  KubernetesNodeRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub ${AWS::StackName}-kubernetes-node
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "ec2.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  KubernetesNodePolicies:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: !Sub ${AWS::StackName}-KubernetesNodePolicy
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "elasticloadbalancing:DescribeLoadBalancers"
            Resource: "*"
      Roles:
        - Ref: "KubernetesNodeRole"

  KubernetesNodeInstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-KubernetesNodeInstanceProfile
      Roles:
        - Ref: "KubernetesNodeRole"

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for orion-ptt-system
      GroupName: !Sub ${AWS::StackName}-orion-default-security-group
      VpcId: {{.VpcID}}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

        - IpProtocol: tcp
          FromPort: 8800
          ToPort: 8800
          CidrIp: 0.0.0.0/0

      SecurityGroupEgress:
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0

      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} Orion PTT System Default Security Group

  AlnilamRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      TTL: 300
      Name: !Sub alnilam.${CreateDNSDomain}
      Type: A
      HostedZoneId: {{.DnsZoneID}}
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

  AtlasRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      TTL: 300
      Name: !Sub atlas.${CreateDNSDomain}
      Type: A
      HostedZoneId: {{.DnsZoneID}}
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

  IcarusRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      TTL: 300
      Name: !Sub icarus.${CreateDNSDomain}
      Type: A
      HostedZoneId: {{.DnsZoneID}}
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

  ObserverRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      TTL: 300
      Name: !Sub observer.${CreateDNSDomain}
      Type: A
      HostedZoneId: {{.DnsZoneID}}
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

  RigelRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      TTL: 300
      Name: !Sub rigel.${CreateDNSDomain}
      Type: A
      HostedZoneId: {{.DnsZoneID}}
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

  RigelProxyRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      TTL: 300
      Name: !Sub rigel.${CreateDNSDomain}
      Type: A
      HostedZoneId: {{.DnsZoneID}}
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

  VaultRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      TTL: 300
      Name: !Sub vault.${CreateDNSDomain}
      Type: A
      HostedZoneId: {{.DnsZoneID}}
      ResourceRecords:
        - !GetAtt EC2Instance.PublicIp

Outputs:
  K8sNodeInternalIpAddress:
    Description: Internal IP Address of Kubernetes Instance
    Value: !GetAtt EC2Instance.PrivateIp
    Export:
      Name: !Sub ${AWS::StackName}-K8sNodePrivateIpAddress

  K8sNodeExternalIpAddress:
    Description: External IP Address of Kubernetes Instance
    Value: !GetAtt EC2Instance.PublicIp
    Export:
      Name: !Sub ${AWS::StackName}-K8sNodePublicIpAddress

  AlnilamFQDN:
    Description: FQDN of Alnilam Service
    Value: !Ref AlnilamRecord

  AtlasFQDN:
    Description: FQDN of Alnilam Service
    Value: !Ref AtlasRecord

  IcarusFQDN:
    Description: FQDN of Icarus Service
    Value: !Ref IcarusRecord

  ObserverFQDN:
    Description: FQDN of Observer Service
    Value: !Ref ObserverRecord

  RigelFQDN:
    Description: FQDN of Rigel Service
    Value: !Ref RigelRecord

  RigelProxyFQDN:
    Description: FQDN of Rigel Proxy Service
    Value: !Ref RigelProxyRecord

  VaultFQDN:
    Description: FQDN of VaultService
    Value: !Ref VaultRecord
